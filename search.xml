<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机组成原理复习</title>
    <url>/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><a id="more"></a>

<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>正数的原码等于自身的二进制数，负数的原码第一位为 1(符号位，表示负数)，后面为自身的二进制数。</p>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>正数的反码等于自身的二进制数，负数的反码符号位不动，其余各位按位取反</p>
<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>正数的补码等于自身的二进制数，负数的补码是在反码的基础上+1</p>
<h3 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h3><p>无论正负数，只要将其<strong>补码</strong>的符号位取反即可</p>
<hr>
<p>在计算机中，最适合数字<strong>加减运算</strong>的数字编码是<strong>补码</strong>，最适合表示<strong>浮点数阶码</strong>的数字编码是<strong>移码</strong>。</p>
<p>例如：</p>
<p><img src="/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/1.jpg" alt="原码和补码">  </p>
]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>大学人工智能复习</title>
    <url>/2020/03/08/%E5%A4%A7%E5%AD%A6%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>OpenCv日记-0</title>
    <url>/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/</url>
    <content><![CDATA[<h1 id="OpenCv日记-lt-1-gt"><a href="#OpenCv日记-lt-1-gt" class="headerlink" title="OpenCv日记&lt;1&gt;"></a>OpenCv日记&lt;1&gt;</h1><a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>OpenCv</strong>是开源的计算机视觉库。考研时买了一本《OpenCv3编程入门》自学了一段时间，对其中的图像处理和计算机视觉相关知识有了一定的认识。不过现在要重新进行学习和认识，参考的书依旧是这本《OpenCv3编程入门》，我会把我在Opencv上所学的知识在博客中进行记录。OpenCv概念什么的不在阐述。</p>
<h2 id="OpenCv安装和环境配置"><a href="#OpenCv安装和环境配置" class="headerlink" title="OpenCv安装和环境配置"></a>OpenCv安装和环境配置</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>首先在官网上下载OpenCV SDK<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/1.jpg" alt="下载">  </li>
<li>安装页面大概这样:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/2.jpg" alt="安装页面"><br>直接安装  </li>
<li>安装:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/3.jpg" alt="安装页面">  <h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3></li>
<li>修改环境中的PATH：<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/4.jpg" alt="安装页面"><br>这里要说一下根据你的vs版本不同配置的vc10、vc4不同，我使用的是vs2015所以用的是vc14  <h3 id="配置Visual-Studio"><a href="#配置Visual-Studio" class="headerlink" title="配置Visual Studio"></a>配置Visual Studio</h3></li>
</ul>
<p><strong>工程包含环境配置</strong>  </p>
<ul>
<li>先创建一个空项目<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/5.jpg" alt="安装页面">  </li>
<li>打开属性管理器<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/7.jpg" alt="安装页面">  </li>
<li>选择这个<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/8.jpg" alt="安装页面"> </li>
<li>VC++目录中的包含目录 添加三条路径：<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/9.jpg" alt="安装页面">    </li>
</ul>
<p><strong>工程库环境配置</strong>  </p>
<ul>
<li>配置<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/10.jpg" alt="安装页面">  </li>
</ul>
<p><strong>链接库配置</strong></p>
<ul>
<li>配置<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/11.jpg" alt="安装页面"><br>完成配置，准备测试，代码如下:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/12.jpg" alt="安装页面">  </li>
<li>测试成功！<blockquote>
<p>注意：此时要用x64编译  </p>
</blockquote>
</li>
</ul>
<p><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/13.jpg" alt="安装页面"> </p>
<hr>
<h2 id="安装CMake"><a href="#安装CMake" class="headerlink" title="安装CMake"></a>安装CMake</h2><p>说实在不知道这一步是干啥的！非常容易出错的一步，我没有安装编译，暂时留给自己一个坑！</p>
<h2 id="HighGUI模块"><a href="#HighGUI模块" class="headerlink" title="HighGUI模块"></a>HighGUI模块</h2><p>在使用OpenCv时的标配是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include&quot;opencv2&#x2F;core&#x2F;core.hpp&quot;  </span><br><span class="line">include&quot;opencv2&#x2F;highgui&#x2F;highgui.hpp&quot;  </span><br><span class="line">&#x2F;&#x2F;也可以直接</span><br><span class="line">include&quot;opencv2&#x2F;opencv.hpp&quot;</span><br><span class="line">using namespace cv;</span><br></pre></td></tr></table></figure>
<h3 id="图像载入显示"><a href="#图像载入显示" class="headerlink" title="图像载入显示:"></a>图像载入显示:</h3><ul>
<li><strong>图像载入: imread()函数</strong><br>函数原型: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mat imread(const string&amp; filename,int flag &#x3D; 1)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>filename</strong>:是我们需要填入的图片路径<br><strong>flag</strong>:指定颜色类型，默认为1，指的是3通道的彩色图像，当值为0时则为灰度图像。</p>
<ul>
<li><strong>图像显示:imshow()函数</strong><br>函数原型:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void imshow(const string&amp; winname,InputArray mat)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>winname</strong>:填需要显示的窗口标识名称.<br><strong>mat</strong>:InputArray类型的mat，填需要显示的图像  </p>
<ul>
<li><strong>创建窗口:namedWindow()函数</strong><br>原型:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void namedWindow(const string&amp; winname,int flags&#x3D;WINDOW_AUTOSIZE);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>参数1</strong>: 窗口名称<br><strong>参数2</strong>: WINDOW_NORMAL是用户可以改变窗口大小，WINDOW_AUTOSIZE不能改变大小自适应,WINDOW_OPENGL窗口会支持OpenGL  </p>
<ul>
<li><strong>输出图像到文件:imwrite()函数</strong><br>函数原型：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool imwrite(const string&amp; filename,InputArray img,const vector&lt;int&gt; &amp; params&#x3D;vector&lt;int&gt;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>参数1</strong>:文件名<br><strong>参数2</strong>:Mat类型数据<br><strong>参数3</strong>:特定格式参数编码  </p>
<h3 id="滑动条的创建和使用"><a href="#滑动条的创建和使用" class="headerlink" title="滑动条的创建和使用"></a>滑动条的创建和使用</h3><ul>
<li><strong>创建滑动条:createTrackbar()函数</strong><br>原型:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int createTrackbar(const string&amp; trackbarname,</span><br><span class="line">const string&amp; winname,int * value,int count,</span><br><span class="line">TrackbarCallback onChange&#x3D;0,void * userdata&#x3D;0);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>参数1</strong>:轨迹条的名字<br><strong>参数2</strong>：表示轨迹条会依附到哪个窗口上，应该用namedWindow()函数创建某个窗口<br><strong>参数3</strong>：表示滑块的位置，在初始时应是该变量当前的值<br><strong>参数4</strong>：最大值位置，最小值始终为0<br><strong>参数5</strong>：这是一个回调函数，<strong>很有用</strong><br><strong>参数6</strong>：不介绍  </p>
<p>利用createTrackbar()函数实例:<br>效果：<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/14.jpg" alt="效果"><br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/15.jpg" alt="效果"><br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/16.jpg" alt="效果"><br>代码如下: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if 1</span><br><span class="line"></span><br><span class="line">#include &quot;opencv2&#x2F;opencv.hpp&quot;</span><br><span class="line">#include&quot;iostream&quot;</span><br><span class="line">using namespace cv;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;变量</span><br><span class="line">double g_A_v;</span><br><span class="line">double g_B_v;</span><br><span class="line">int g_value_control;</span><br><span class="line">const int g_value &#x3D; 100;</span><br><span class="line">Mat img0;</span><br><span class="line">Mat img1;</span><br><span class="line">Mat imgd;</span><br><span class="line"></span><br><span class="line">void on_Trackbar(int, void *)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;求出当前alpha的值相对于最大值的比例</span><br><span class="line">	g_A_v &#x3D; (double)g_value_control &#x2F; g_value;</span><br><span class="line">	&#x2F;&#x2F;则beta值为1减去alpha的值</span><br><span class="line">	g_B_v &#x3D; (1.0 - g_A_v);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;根据alpha和beta值进行线性混合</span><br><span class="line">	addWeighted(img0, g_A_v, img1, g_B_v, 0.0, imgd);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;显示效果图</span><br><span class="line">	imshow(&quot;createTrackbar()函数实例&quot;, imgd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;载入图片,判断!</span><br><span class="line">	img0 &#x3D; imread(&quot;gays.jpg&quot;);</span><br><span class="line">	img1 &#x3D; imread(&quot;gays1.jpg&quot;);</span><br><span class="line">	if (!img0.data) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;读取第一个图片失败!&quot; &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	if (!img1.data) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;读取第二个图片失败!&quot; &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;设置滑动条的初始值</span><br><span class="line">	g_value_control &#x3D; 70;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗体</span><br><span class="line">	namedWindow(&quot;createTrackbar()函数实例&quot;, 1);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;在创建的窗体中创建一个滑动条控件</span><br><span class="line">	char Trackbarname[50];</span><br><span class="line">	&#x2F;&#x2F;格式化输入</span><br><span class="line">	sprintf(Trackbarname, &quot;透明值 %d&quot;, g_value_control);</span><br><span class="line"></span><br><span class="line">	createTrackbar(Trackbarname, &quot;createTrackbar()函数实例&quot;, &amp;g_value_control, g_value, on_Trackbar);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;结果在回调函数中显示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	waitKey(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>OpenCv</category>
      </categories>
      <tags>
        <tag>OpenCv</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用和部署</title>
    <url>/2020/03/07/git%E4%BD%BF%E7%94%A8%E5%92%8C%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="git的使用和部署"><a href="#git的使用和部署" class="headerlink" title="git的使用和部署"></a>git的使用和部署</h1><a id="more"></a>
<h2 id="git的下载"><a href="#git的下载" class="headerlink" title="git的下载"></a>git的下载</h2><p>官网下载安装包: <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>下载的exe程序双击打开后一直next到finish结束</p>
<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>运行Git Bash Here  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;&#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>
<p>然后一直回车，这一步可以生成一个密匙保留在：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\8\.ssh\id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>这里面8对应的就是你的Windows用户名<br>用文本编译器打开，复制里面的内容并在你的github账户中建立一个ssh的秘钥。<br>具体步骤是在：setting-&gt;SSH and GPG keys-&gt;点击Add SSH Keys<br>然后在Git Bash Here 中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>
<p>提示内容一律yes<br>最后一步，全局配置你的git信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;qiuyeyijian&quot;     &#x2F;&#x2F; 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@gmail.com&quot; &#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>
<h2 id="github上传代码"><a href="#github上传代码" class="headerlink" title="github上传代码"></a>github上传代码</h2><ul>
<li>git操作  <blockquote>
<p>1.新建一个空的文件夹<br>2.在文件夹中进行git命令，先进行git初始化  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>进行github操作<blockquote>
<p>在github上创建一个仓库<br>创建好的仓库有两个地址：SSH地址、Http地址</p>
</blockquote>
</li>
<li>上传到github上<blockquote>
<p>将远程仓库克隆到本地</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &quot;SSH地址&quot;  &#x2F;&#x2F;将地址换成刚才复制的SSH地址</span><br></pre></td></tr></table></figure>
<blockquote>
<p>文件中会出来一个github仓库名的文件夹<br>把你要上传的代码项目内容放在此文件夹中<br>命令进入此文件夹: <strong>cd 文件名</strong><br><strong>依次输入以下代码</strong>  </p>
</blockquote>
</li>
</ul>
<p>//注意后面的‘点’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: git add .</span><br></pre></td></tr></table></figure>
<p>//first commit 换成你要提交的信息，而且这个命令不能少  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2: git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>
<p>//换成你要提交的GitHub仓库SSH地址  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3: git remote add origin SSH地址</span><br></pre></td></tr></table></figure>
<p>若第3步出错：提示出错信息：fatal: remote origin already exists.<br>解决方法:</p>
<blockquote>
<ul>
<li>先输入 git remote rm origin  </li>
<li>再输入 <strong>SSH地址后面是去掉git为github.io.git</strong> 就不会报错了！  </li>
<li>如果输入 git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’.<br>我们需要修改gitconfig文件的内容git config –global user.name “qiuyeyijian” // 你的github用户名，非昵称<br>git config –global user.email “<a href="mailto:xxx@gmail.com">xxx@gmail.com</a>“ // 填写你的github注册邮箱</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4: git push -u origin master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1、如果在github的remote上已经有了文件，会出现错误。此时应当先pull一下，即：  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>然后再进行： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>


<p>上传基本完成!<br>参考:<a href="https://www.jianshu.com/p/aab3801fe9a5" target="_blank" rel="noopener">https://www.jianshu.com/p/aab3801fe9a5</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于next主题的使用</title>
    <url>/2020/03/07/%E5%85%B3%E4%BA%8Enext%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="hexo博客next主题的使用总结"><a href="#hexo博客next主题的使用总结" class="headerlink" title="hexo博客next主题的使用总结"></a>hexo博客next主题的使用总结</h1><a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>使用git安装</strong></p>
<p>利用官网中的Git命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>



<p><strong>直接在github上下载</strong></p>
<p>下载后解压到你的站点的theme中，然后在站点配置文件config中修改theme的参数改为解压后的文件名字</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-改为中文"><a href="#1-改为中文" class="headerlink" title="1.改为中文"></a>1.改为中文</h3><p>在站点配置文件config中修改 language 的参数默认为en是英语，我们改为中文是zh-Hans</p>
<blockquote>
<p>注意属性之后一定要加上空格再加参数&gt;</p>
</blockquote>
<h3 id="2-增加标签页和分类页"><a href="#2-增加标签页和分类页" class="headerlink" title="2.增加标签页和分类页"></a>2.增加标签页和分类页</h3><p>在theme中既主题配置文件config中找到 menu 把tags和categories打开，在此之前一定要先创建目录：在站点执行语句：hexo new page “文件名”,你要创建的是tags 就文件名就是tags</p>
<blockquote>
<p>如果有：Cannot GET /tags/%20/ 的情况需要在next中的config配置文件中不要有空格!&gt;</p>
</blockquote>
<h3 id="3-更改头像"><a href="#3-更改头像" class="headerlink" title="3.更改头像"></a>3.更改头像</h3><p>在主题配置文件中config中找到avatar 修改路径即可</p>
<h3 id="4-设置全文阅读"><a href="#4-设置全文阅读" class="headerlink" title="4.设置全文阅读"></a>4.设置全文阅读</h3><p>在主题配置文件中找到auto_excerpt修改为true<br>或者在文章中加入&lt;!- more -&gt;</p>
<h3 id="5-添加动态背景"><a href="#5-添加动态背景" class="headerlink" title="5.添加动态背景"></a>5.添加动态背景</h3><p>主题配置文件中找到canvas<br>子选项中可以改为true打开</p>
<h3 id="6-增加搜索功能"><a href="#6-增加搜索功能" class="headerlink" title="6.增加搜索功能"></a>6.增加搜索功能</h3><p>利用next官网中的第三方服务<strong>Local Search</strong><br>按照其步骤：  </p>
<ul>
<li>先安装在站点中执行：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>在站点配置文件中添加以下语句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>在主题配置文件中更改：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true  &#x2F;&#x2F;false改为true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-添加数据统计"><a href="#7-添加数据统计" class="headerlink" title="7.添加数据统计"></a>7.添加数据统计</h3><p>还是在next官网的第三方工具中找到不蒜子统计进行配置<br>  enable属性的参数改为true就能够开启</p>
<h3 id="8-添加内容分享功能"><a href="#8-添加内容分享功能" class="headerlink" title="8.添加内容分享功能"></a>8.添加内容分享功能</h3><p>在主题配置文件中将 <strong>jiathis</strong> 属性参数由false改为 <strong>true</strong> </p>
<h3 id="9-加载动画"><a href="#9-加载动画" class="headerlink" title="9.加载动画"></a>9.加载动画</h3><p>在主题配置文件中找到<strong>pace</strong>属性值改为<strong>true</strong><br>下面的<strong>pace_theme</strong>改为上面列举的几种</p>
<h3 id="10-隐藏页面中的“强力驱动”"><a href="#10-隐藏页面中的“强力驱动”" class="headerlink" title="10.隐藏页面中的“强力驱动”"></a>10.隐藏页面中的“强力驱动”</h3><p>在主题文件中的<strong><em>layout/_partials/footer</em></strong><br>直接把if theme.footer.powered中的内容直接注释掉就行了</p>
<h3 id="11-标签和分类的多个演示"><a href="#11-标签和分类的多个演示" class="headerlink" title="11.标签和分类的多个演示"></a>11.标签和分类的多个演示</h3><p>对于<strong>标签</strong>来说具有同级分类使用的格式:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - 标签名1</span><br><span class="line">  - 标签名2</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">对于**分类**来说hexo没有同级分类:</span><br></pre></td></tr></table></figure>
<p>categories: </p>
<ul>
<li>分类1</li>
<li>子分类1<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 12.博客中添加图片</span><br><span class="line">- 下载一个插件:  </span><br><span class="line">可以在hexo目录下执行git命令：</span><br></pre></td></tr></table></figure>
npm install hexo-asset-image –save<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 把站点配置文件中的**post_asset_folder**属性改为**true**</span><br><span class="line">- 此时当你创建博文时 会在当前目录下出现一个和.md一样名字的文件夹，这个文件夹里面就是存储图片的   </span><br><span class="line"></span><br><span class="line">- 使用markdown语法:  xxxx就是文件夹名</span><br></pre></td></tr></table></figure>
<img src="/2020/03/07/%E5%85%B3%E4%BA%8Enext%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%9B%BE%E7%89%87%E5%90%8D.jpg" alt="你想输入的替代文字"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果出现图片在hexo s 后不加载，解决方案:</span><br><span class="line">&gt; 本人第一次搞也是出了很大问题，在网上找了很多方法最后找到这个：https:&#x2F;&#x2F;blog.csdn.net&#x2F;xjm850552586&#x2F;article&#x2F;details&#x2F;84101345?depth_1-utm_source&#x3D;distribute.pc_relevant.none-task&amp;utm_source&#x3D;distribute.pc_relevant.none-task  </span><br><span class="line"></span><br><span class="line">大致就是把下载插件中的js代码修改一下，修改为：</span><br></pre></td></tr></table></figure>
‘use strict’;<br>var cheerio = require(‘cheerio’);</li>
</ul>
<p>// <a href="http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string" target="_blank" rel="noopener">http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</a><br>function getPosition(str, m, i) {<br>  return str.split(m, i).join(m).length;<br>}</p>
<p>var version = String(hexo.version).split(‘.’);<br>hexo.extend.filter.register(‘after_post_render’, function(data){<br>  var config = hexo.config;<br>  if(config.post_asset_folder){<br>        var link = data.permalink;<br>    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)<br>       var beginPos = getPosition(link, ‘/‘, 1) + 1;<br>    else<br>       var beginPos = getPosition(link, ‘/‘, 3) + 1;<br>    // In hexo 3.1.1, the permalink of “about” page is like “…/about/index.html”.<br>    var endPos = link.lastIndexOf(‘/‘) + 1;<br>    link = link.substring(beginPos, endPos);</p>
<pre><code>var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];
for(var i = 0; i &lt; toprocess.length; i++){
  var key = toprocess[i];

  var $ = cheerio.load(data[key], {
    ignoreWhitespace: false,
    xmlMode: false,
    lowerCaseTags: false,
    decodeEntities: false
  });

  $(&apos;img&apos;).each(function(){
    if ($(this).attr(&apos;src&apos;)){
        // For windows style path, we replace &apos;\&apos; to &apos;/&apos;.
        var src = $(this).attr(&apos;src&apos;).replace(&apos;\\&apos;, &apos;/&apos;);
        if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
           !/^\s*\//.test(src)) {
          // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.
          // In addition, to support multi-level local directory.
          var linkArray = link.split(&apos;/&apos;).filter(function(elem){
            return elem != &apos;&apos;;
          });
          var srcArray = src.split(&apos;/&apos;).filter(function(elem){
            return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;
          });
          if(srcArray.length &gt; 1)
            srcArray.shift();
          src = srcArray.join(&apos;/&apos;);
          $(this).attr(&apos;src&apos;, config.root + link + src);
          console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);
        }
    }else{
        console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);
        console.info&amp;&amp;console.info($(this));
    }
  });
  data[key] = $.html();
}</code></pre><p>  }<br>});<br>```</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
