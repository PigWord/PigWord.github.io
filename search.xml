<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot-bbs1</title>
    <url>/2020/04/30/springboot-bbs1/</url>
    <content><![CDATA[<h1 id="SpringBoot论坛-lt-1-gt"><a href="#SpringBoot论坛-lt-1-gt" class="headerlink" title="SpringBoot论坛&lt;1&gt;"></a>SpringBoot论坛&lt;1&gt;</h1><a id="more"></a>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上一次我们把登录的github权限给做了，得到了自己的github登录。并且对于项目中的导航条前端方面用到了bootstrap框架，接下来我们将对页面和数据库方面进行编写。  </p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>在application文件中编写以下环境<br><img src="/2020/04/30/springboot-bbs1/1.jpg" alt></li>
<li>里面的参数都为之前AuthorizeController类中配置的固定参数<br><img src="/2020/04/30/springboot-bbs1/2.jpg" alt>  </li>
<li>对AuthorizeController类进行修改<br><img src="/2020/04/30/springboot-bbs1/3.jpg" alt></li>
<li>运行后<br><img src="/2020/04/30/springboot-bbs1/4.jpg" alt><br><img src="/2020/04/30/springboot-bbs1/5.jpg" alt>  </li>
</ul>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>IMU复试专业课</title>
    <url>/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="IMU"><a href="#IMU" class="headerlink" title="IMU"></a>IMU</h1><a id="more"></a>
<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><blockquote>
<p>1、输入俩个数，找到之间偶数，求和    </p>
</blockquote>
<p>分析: 因为不是偶数就是奇数，输入的a要小于b，从a开始判断a是否为偶数，是的话从a+2的地方开始，不是的话从a+1的地方开始，一直循环+2直至到b前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&quot;iostream&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,sum,t;</span><br><span class="line">	sum&#x3D;0;</span><br><span class="line">	cout&lt;&lt;&quot;请输入a  b：&quot;;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	if(a&gt;b)&#123;</span><br><span class="line">        t&#x3D;a;</span><br><span class="line">        a&#x3D;b;</span><br><span class="line">        b&#x3D;t;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if(a%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">        for(a&#x3D;a+2;a&lt;b;a&#x3D;a+2)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+&#x3D;a;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">        for(a&#x3D;a+1;a&lt;b;a&#x3D;a+2)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+&#x3D;a;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;&quot;与&quot;&lt;&lt;b&lt;&lt;&quot;之间的偶数&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行:<br><img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C1.jpg" alt></p>
<blockquote>
<p>2、1+2+2+3+3+3+…+n+n+……+n求和</p>
</blockquote>
<p>分析:观察发现是从1加到n，对与1来说加了1次，对2来说加了2次，余此类推，根据加的数确定要加几次组成内循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&quot;iostream&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	int sum&#x3D;0;</span><br><span class="line">	int n,i,j;</span><br><span class="line">	cout&lt;&lt;&quot;请输入n：&quot;;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">	for(i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;i;j++)&#123;</span><br><span class="line">            sum+&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;&quot;最后结果为：&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行:<br><img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C2.jpg" alt>  </p>
<p>由于复试题都是回忆版学长学姐回忆出了不同的问题，我们一并做了</p>
<blockquote>
<p>第二题第二种 输入一个数，计算 1* 2 * 2+…..n*n</p>
</blockquote>
<p>分析：这和上一个思路一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&quot;iostream&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,sum&#x3D;1;</span><br><span class="line">    int i,j;</span><br><span class="line">    cout&lt;&lt;&quot;请输入一个数n:&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum&#x3D;sum*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;&quot;结果: &quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行:<br><img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C3.jpg" alt>  </p>
<blockquote>
<p>3、迭代法求平方根</p>
</blockquote>
<p>分析:<br>首先我们要知道迭代法是啥,迭代法求平方根就是按照以下步骤构建一个序列x0,x1,…,xn,来逐步逼近方程f(x)=0的解:<br>1）选取适当的初值x0；</p>
<p>2）确定迭代格式，即建立迭代关系，需要将方程f(x)=0改写为x=φ(x)的等价形式；</p>
<p>3)   构造序列x0，x1，……，xn，即先求得x1=φ(x0)，再求x2=φ(x1)，……如此反复迭代，就得到一个数列x0， x1，……，xn，若这个数列收敛，即存在极值<img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C4.1.jpg" alt>，且函数 φ(x)连续，则很容易得到这个极限值,x*就是方程f(x)=0的根。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&quot;iostream&quot;</span><br><span class="line">#include&quot;cmath&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	double x1,x2,a;</span><br><span class="line">	cout&lt;&lt;&quot;请输入a: &quot;;</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	x2&#x3D;1.0;</span><br><span class="line">	int flag&#x3D;1;     &#x2F;&#x2F;这里的flag是控制位数</span><br><span class="line">	while(flag)</span><br><span class="line">	&#123;</span><br><span class="line">		x1&#x3D;x2;</span><br><span class="line">		x2&#x3D;(x1+a&#x2F;x1)&#x2F;2.0;</span><br><span class="line">		if(fabs(x1-x2)&lt;0.00001)     &#x2F;&#x2F;0.00001是控制小数到第5位</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;&quot;平方根为：&quot;&lt;&lt;x2&lt;&lt;endl;</span><br><span class="line">			flag&#x3D;0;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行:<br><img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C4.jpg" alt>  </p>
<blockquote>
<p>4、把文件里面的信息读入 然后80个字符是一行  统计行数 小写字母 大写字母 数字的个数  </p>
</blockquote>
<p>分析:这道题用到了文件流相关知识需要用到fstream库函数,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&quot;iostream&quot;</span><br><span class="line">#include&quot;fstream&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;声明行数，数字，大小写个数 </span><br><span class="line">	int row,num,bch,sch,len;</span><br><span class="line">	row&#x3D;num&#x3D;bch&#x3D;sch&#x3D;len&#x3D;0;</span><br><span class="line">	&#x2F;&#x2F;使用ifstream创建对象 </span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.open(&quot;test.txt&quot;,ios::in);		&#x2F;&#x2F;使用open方法打开当前文件中的test.txt文档 </span><br><span class="line">	</span><br><span class="line">	char buf[1024];		&#x2F;&#x2F;将txt的信息存入 buf字符数组中 </span><br><span class="line">			</span><br><span class="line">&#x2F;&#x2F;	while(ifs &gt;&gt; buf)&#123;	</span><br><span class="line">&#x2F;&#x2F;		cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line">&#x2F;&#x2F;	&#125;</span><br><span class="line">	while(!ifs.eof())&#123;	&#x2F;&#x2F;使用ifstream函数的eof方法判断结束为止 </span><br><span class="line">		ifs&gt;&gt;buf[len++];	&#x2F;&#x2F;将txt存入buf中 </span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;&quot;显示: &quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;buf&lt;&lt;endl; </span><br><span class="line">	cout&lt;&lt;&quot;总数: &quot;&lt;&lt;len-1&lt;&lt;endl;</span><br><span class="line">	int r&#x3D;1;			&#x2F;&#x2F;用来判断80的换行数 </span><br><span class="line">	&#x2F;&#x2F;下面通过数组每一位的判断得到结果</span><br><span class="line">	for(int i&#x3D;0;i&lt;len-1;i++,r++)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;判断行数(80个标准) </span><br><span class="line">		if(r&#x3D;&#x3D;80)</span><br><span class="line">		&#123;</span><br><span class="line">			row++;</span><br><span class="line">			r&#x3D;1;	&#x2F;&#x2F;重新变为1开始计数 </span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;判断数字</span><br><span class="line">		if(buf[i]&gt;&#x3D;&#39;0&#39;&amp;&amp;buf[i]&lt;&#x3D;&#39;9&#39;)&#123;</span><br><span class="line">			num++;</span><br><span class="line">		&#125; </span><br><span class="line">		&#x2F;&#x2F;判断小写</span><br><span class="line">		else if(buf[i]&gt;&#x3D;&#39;a&#39;&amp;&amp;buf[i]&lt;&#x3D;&#39;z&#39;) &#123;</span><br><span class="line">			sch++;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;判断大写</span><br><span class="line">		else if(buf[i]&gt;&#x3D;&#39;A&#39;&amp;&amp;buf[i]&lt;&#x3D;&#39;Z&#39;) &#123;</span><br><span class="line">			bch++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125; </span><br><span class="line">	cout&lt;&lt;&quot;行数: &quot;&lt;&lt;row+1&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;数字: &quot;&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;小写: &quot;&lt;&lt;sch&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;大写: &quot;&lt;&lt;bch&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:<br>test.txt<br><img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C5.jpg" alt><br>结果:<br><img src="/2020/04/19/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE/IMU%E5%A4%8D%E8%AF%95%E4%B8%93%E4%B8%9A%E8%AF%BE%5C6.jpg" alt>  </p>
<blockquote>
<p>6、选择排序</p>
</blockquote>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2>]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>复试</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot-bbs0</title>
    <url>/2020/04/14/springboot-bbs0/</url>
    <content><![CDATA[<h1 id="SpringBoot论坛-lt-0-gt"><a href="#SpringBoot论坛-lt-0-gt" class="headerlink" title="SpringBoot论坛&lt;0&gt;"></a>SpringBoot论坛&lt;0&gt;</h1><a id="more"></a>
<h2 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h2><p>1.新建<br><img src="/2020/04/14/springboot-bbs0/1.jpg" alt><br>2.选择spring项目<br><img src="/2020/04/14/springboot-bbs0/2.jpg" alt><br>3.填写<br><img src="/2020/04/14/springboot-bbs0/3.jpg" alt><br><img src="/2020/04/14/springboot-bbs0/4.jpg" alt><br><img src="/2020/04/14/springboot-bbs0/5.jpg" alt></p>
<p>4.创建完成后<br><img src="/2020/04/14/springboot-bbs0/6.jpg" alt></p>
<h2 id="添加环境"><a href="#添加环境" class="headerlink" title="添加环境"></a>添加环境</h2><p>进入spring的官方网页，选择下面内容<br><img src="/2020/04/14/springboot-bbs0/7.jpg" alt>  </p>
<p>复制内容到项目中的pom配置文件中<br><img src="/2020/04/14/springboot-bbs0/8.jpg" alt>  </p>
<h2 id="测试hello程序"><a href="#测试hello程序" class="headerlink" title="测试hello程序"></a>测试hello程序</h2><p>在bbs中创建controller文件夹，并且创建一个测试类HelloController<br><img src="/2020/04/14/springboot-bbs0/9.jpg" alt><br>HelloController内容如下<br><img src="/2020/04/14/springboot-bbs0/10.jpg" alt><br>再到spring官网找到Html相关页面，复制<br><img src="/2020/04/14/springboot-bbs0/11.jpg" alt><br>在templates中创建静态网页，并将复制内容拷贝到网页中<br><img src="/2020/04/14/springboot-bbs0/12.jpg" alt><br>运行后如下<br><img src="/2020/04/14/springboot-bbs0/13.jpg" alt><br>到配置文件中可以修改tomcat的端口号，我们改成8886<br><img src="/2020/04/14/springboot-bbs0/14.jpg" alt>  </p>
<h2 id="使用Github托管代码"><a href="#使用Github托管代码" class="headerlink" title="使用Github托管代码"></a>使用Github托管代码</h2><p>现在github上创建仓库<br><img src="/2020/04/14/springboot-bbs0/15.jpg" alt><br>在项目中进行git初始化<br><img src="/2020/04/14/springboot-bbs0/16.jpg" alt> </p>
<p>利用git status看状态<br><img src="/2020/04/14/springboot-bbs0/17.jpg" alt> </p>
<p>使用git add . 使用它会把工作时的所有变化提交到暂存区<br><img src="/2020/04/14/springboot-bbs0/18.jpg" alt> </p>
<p>git提交命令<br><img src="/2020/04/14/springboot-bbs0/19.jpg" alt> </p>
<p>查看状态<br><img src="/2020/04/14/springboot-bbs0/20.jpg" alt><br>进入你项目的初始化后的git中找到config配置文件<br><img src="/2020/04/14/springboot-bbs0/21.jpg" alt> </p>
<p>修改为<br><img src="/2020/04/14/springboot-bbs0/22.jpg" alt> </p>
<p>这一步按照github上的走<br><img src="/2020/04/14/springboot-bbs0/23.jpg" alt> </p>
<p>这一步也是<br><img src="/2020/04/14/springboot-bbs0/24.jpg" alt> </p>
<p>弄好之后你的项目上传到github上了<br><img src="/2020/04/14/springboot-bbs0/25.jpg" alt> </p>
<h2 id="使用bootstrap编写导航栏样式"><a href="#使用bootstrap编写导航栏样式" class="headerlink" title="使用bootstrap编写导航栏样式"></a>使用bootstrap编写导航栏样式</h2><p>在bootstrap官网上下载文件<br><img src="/2020/04/14/springboot-bbs0/26.jpg" alt><br><img src="/2020/04/14/springboot-bbs0/27.jpg" alt><br>复制到项目中的static文件中<br><img src="/2020/04/14/springboot-bbs0/28.jpg" alt> </p>
<p>使用bootstrap默认导航条<br><img src="/2020/04/14/springboot-bbs0/29.jpg" alt>  </p>
<p>编写网页<br>引入css和js  并且使用默认代码并修改<br><img src="/2020/04/14/springboot-bbs0/30.jpg" alt>  </p>
<p>加上controller代码<br><img src="/2020/04/14/springboot-bbs0/32.jpg" alt></p>
<blockquote>
<p>注意：如果出现404 那么在pom中添加引擎即下面代码</p>
</blockquote>
<p><img src="/2020/04/14/springboot-bbs0/31.jpg" alt><br>完成后如图</p>
<p><img src="/2020/04/14/springboot-bbs0/33.jpg" alt>  </p>
<p>修改后git到github上去<br>git status //观察状态<br>git add .     //将本次修改git到暂存区<br>git status //观察<br>git commit -m “###” //提交<br>git push //提交至github</p>
<h2 id="实现github登录"><a href="#实现github登录" class="headerlink" title="实现github登录"></a>实现github登录</h2><p>在github上<br><img src="/2020/04/14/springboot-bbs0/34.jpg" alt><br>利用Oauth，创建<br><img src="/2020/04/14/springboot-bbs0/35.jpg" alt>  </p>
<p><img src="/2020/04/14/springboot-bbs0/36.jpg" alt>  </p>
<h2 id="使用Github登录"><a href="#使用Github登录" class="headerlink" title="使用Github登录"></a>使用Github登录</h2><ul>
<li><p>首先进入登录的那个页面index找到登录的地方 </p>
</li>
<li><p>找到github授权登录的教程页面找到以下地址复制到登录按钮中<br><img src="/2020/04/14/springboot-bbs0/37.jpg" alt>   </p>
</li>
<li><p>在github上找到以下申请的OAuth Apps 找到client_id复制<br><img src="/2020/04/14/springboot-bbs0/38.jpg" alt></p>
</li>
<li><p>在复制返回地址<br><img src="/2020/04/14/springboot-bbs0/39.jpg" alt>  </p>
</li>
<li><p>最后在index上的代码如下<br><img src="/2020/04/14/springboot-bbs0/40.jpg" alt>  </p>
</li>
<li><p>运行代码点击登录时的样子<br><img src="/2020/04/14/springboot-bbs0/41.jpg" alt>  </p>
</li>
<li><p>获取code操作  </p>
</li>
<li><p>新建类编写代码<br><img src="/2020/04/14/springboot-bbs0/42.jpg" alt>  </p>
</li>
</ul>
<blockquote>
<p>登录获取请求  </p>
</blockquote>
<p>-使用okHttp<br><img src="/2020/04/14/springboot-bbs0/43.jpg" alt>  </p>
<ul>
<li><p>新建provider文件夹<br><img src="/2020/04/14/springboot-bbs0/44.jpg" alt> </p>
</li>
<li><p>新建dto文件夹<br><img src="/2020/04/14/springboot-bbs0/45.jpg" alt> </p>
</li>
<li><p>创建类AccessTokenDTO<br><img src="/2020/04/14/springboot-bbs0/46.jpg" alt></p>
</li>
<li><p>在okhttp的官网上复制post请求的代码进行修改<br><img src="/2020/04/14/springboot-bbs0/47.jpg" alt> </p>
</li>
<li><p>先引入okhttp依赖<br><img src="/2020/04/14/springboot-bbs0/48.jpg" alt> </p>
</li>
<li><p>在引入fastjson依赖<br><img src="/2020/04/14/springboot-bbs0/49.jpg" alt><br>找到下面的复制<br><img src="/2020/04/14/springboot-bbs0/50.jpg" alt> </p>
</li>
<li><p>引入<br><img src="/2020/04/14/springboot-bbs0/51.jpg" alt> </p>
</li>
<li><p>创建GithubProvider类<br><img src="/2020/04/14/springboot-bbs0/52.jpg" alt> </p>
</li>
<li><p>创建AutorizeController类<br><img src="/2020/04/14/springboot-bbs0/53.jpg" alt> </p>
</li>
<li><p>在github上找到这个并新建<br><img src="/2020/04/14/springboot-bbs0/54.jpg" alt> </p>
</li>
<li><p>我们用的是用户信息，所以点击user<br><img src="/2020/04/14/springboot-bbs0/55.jpg" alt> </p>
</li>
<li><p>创建后有一段码<br><img src="/2020/04/14/springboot-bbs0/56.jpg" alt> </p>
</li>
<li><p>创建GithubUser类<br><img src="/2020/04/14/springboot-bbs0/57.jpg" alt> </p>
</li>
<li><p>在githubprovider类中创建getuser方法<br><img src="/2020/04/14/springboot-bbs0/58.jpg" alt> </p>
</li>
<li><p>再次进入okhttp的官网找到Get的方法<br><img src="/2020/04/14/springboot-bbs0/59.jpg" alt> </p>
</li>
<li><p>getuser方法代码如下<br><img src="/2020/04/14/springboot-bbs0/60.jpg" alt> </p>
</li>
<li><p>修改Githubprovider类中的getAccessToken方法<br><img src="/2020/04/14/springboot-bbs0/61.jpg" alt> </p>
</li>
<li><p>修改为以下<br><img src="/2020/04/14/springboot-bbs0/62.jpg" alt> </p>
</li>
<li><p>AuthorizeController类中进行修改<br><img src="/2020/04/14/springboot-bbs0/63.jpg" alt> </p>
</li>
<li><p>由于个人github账户的name为空所以显示出来是这样<br><img src="/2020/04/14/springboot-bbs0/64.jpg" alt> </p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>DIY手机稳定器</title>
    <url>/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/</url>
    <content><![CDATA[<h1 id="DIY手机稳定器"><a href="#DIY手机稳定器" class="headerlink" title="DIY手机稳定器"></a>DIY手机稳定器</h1><a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前在学校准备考试的时候一直就想剪一些视频，不过受限于当时情况的影响只是每天想想自己要拍些什么、怎么剪、利用什么剪辑技巧手法。但是考完回家之后却一直提不上劲，一是担心自己考不上的话要联系公司，要自己多做一些java项目练练手但无从下手，二是感觉考完太累了啥事都不想干，有时连吃饭都不想动（逃。回家受疫情影响在家也待了快4个月了（元旦之前都逃跑了），慢慢的自己也有了之前的拍视频的想法。但自己的设备有限，想买一个稳定器使用看了看网上大疆和智云都在五百以上，鉴于自己在家没有生活费和经济没有独立再加上懒也就没买。但是在网上看到使用的<strong>小斯坦尼康</strong>稳定器，看了一些原理再加上屋里面买了好多A4纸作为材料，于是<strong>DIY手机稳定器</strong>开始了。</p>
<h1 id="DIY"><a href="#DIY" class="headerlink" title="DIY"></a>DIY</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在做稳定器之前我们需要的材料非常简单，<strong>A4纸</strong>、<strong>剪刀</strong>、<strong>双面胶</strong>、<strong>固体胶</strong>、<strong>透明胶</strong>、<strong>拆机工具</strong>。  </p>
<p>当然如果有条件的小朋友可以用<strong>木板</strong>和<strong>木板工具</strong>制作，这样制作出来的成品更好使用也最佳。</p>
<p>如图:<br><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/0.jpg" alt><br>(着剪刀估计和我差6岁)  </p>
<h2 id="原理（不确定）"><a href="#原理（不确定）" class="headerlink" title="原理（不确定）"></a>原理（不确定）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看<strong>小斯坦尼康</strong>稳定器的原理个人认为是考<strong>重力</strong>稳定手机，手柄的部分也是最重要的应该是此处的<strong>摩擦力</strong>小，在拍摄时扭动不会改变受重力影响的手机。（以上为自己瞎分析，机械的朋友可以告诉我真正的原理）<br>小斯坦尼康图:<br><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/01.jpg" alt>  </p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据以上分析的原理进行制作，当然成功与否也不太重要（逃。  </p>
<blockquote>
<p>自己画的草图部分，制作时根据情况而定(毛泽东思想)</p>
</blockquote>
<p>草图：<br><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/1.jpg" alt>   </p>
<blockquote>
<p>图中的支架和重要的手柄部分都使用A4纸制作<br>为了让大家清楚的直到手柄部分的构成，看下图  </p>
</blockquote>
<p>手柄部分:<br><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/02.jpg" alt>  </p>
<h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><blockquote>
<p>先利用A4纸制作支架  </p>
<blockquote>
<p>根据直径的统一标准<strong>1.5cm</strong>做空心圆柱体<br>在制作的过程中使用<strong>双面胶</strong>把尾部粘牢<br>中间部分用<strong>固体胶</strong>粘牢  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/2.png" alt> </p>
<blockquote>
<p>做基本实心的支架</p>
<blockquote>
<p>先将A4纸折为一般后粘在一块，保证最后厚</p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/3.jpg" alt></p>
<blockquote>
<blockquote>
<p>利用双面胶粘好  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/4.jpg" alt>  </p>
<blockquote>
<p>完成一个支架</p>
<blockquote>
<p>将实心支架从中间切开<br>把空心支架与实心支架进行连接<br>先用双面胶连接  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/5.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>再用透明胶连接  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/6.jpg" alt></p>
<blockquote>
<blockquote>
<p>需要制作5个空心和3个实心<br>3个实心分别用于：底部支架(切开)、前方支架、手把<br>5个空心分别是:4个支架、1个支柱<br>根据手机的大小进行空隙(也就是手机放置)大小适应  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/7.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>在利用实心支架对两部分进行整合<br>为了节省操作(逃，利用三角形更加牢固的原理就不封顶了(其实是觉得麻烦,逃)<br>支柱和顶部连接  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/8.jpg" alt>  </p>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/9.jpg" alt>   </p>
<blockquote>
<blockquote>
<p>指明一下名称  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/10.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>利用剪的小条+双面胶对支柱和上面支架部分进行连接<br>此时支架部分基本完成  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/11.jpg" alt>  </p>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/12.jpg" alt>  </p>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/13.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>首先对于空心支柱我们进行实心化  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/14.jpg" alt>  </p>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/15.jpg" alt>  </p>
<blockquote>
<p>做手柄部分(重要)  </p>
<blockquote>
<p>首先规定宽度为<strong>1.5cm</strong>长条  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/16.jpg" alt>   </p>
<blockquote>
<blockquote>
<p>将其剪碎  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/17.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>使用固体胶粘和  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/18.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>一定要根据支柱的直径进行整合<br>中间利用固体胶和双面胶</p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/19.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>这时就需要一百年都不用的拆机工具</p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/20.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>将手柄部分从中穿透<br><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/21.jpg" alt>  </p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这一步及其考验手活(逃<br>2百年过去…</p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/22.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>制作支撑<br>同样是规定<strong>1.5</strong>cm，但这一步不强求<br>利用固体胶粘牢  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/24.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>需要做两个<br>完成后如图  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/25.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>这时需要用你的想象力来制作手柄了<br>按照原理图的样子大概出来这样  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/26.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>此时对完成的部分进行再加牢  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/27.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>最后加上<strong>重物</strong>即可<br>重物随意(橙子登场)  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/28.jpg" alt>  </p>
<blockquote>
<blockquote>
<p>如果自己手机太重，增加重物的重量  </p>
</blockquote>
</blockquote>
<p><img src="/2020/03/28/DIY%E6%89%8B%E6%9C%BA%E7%A8%B3%E5%AE%9A%E5%99%A8/29.jpg" alt>  </p>
<p>完成！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;谢谢大家能够来到这里!也谢谢能够看完!稳定器的原理不太能拿稳，制作简易稳定器也是一时的心血来潮。感谢观看！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCv日记-1</title>
    <url>/2020/03/26/OpenCv%E6%97%A5%E8%AE%B0-1/</url>
    <content><![CDATA[<h1 id="OpenCV日记-lt-1-gt"><a href="#OpenCV日记-lt-1-gt" class="headerlink" title="OpenCV日记&lt;1&gt;"></a>OpenCV日记&lt;1&gt;</h1><p>探究core组件</p>
<a id="more"></a>

<h1 id="OpenCV数据结构和基本绘图"><a href="#OpenCV数据结构和基本绘图" class="headerlink" title="OpenCV数据结构和基本绘图"></a>OpenCV数据结构和基本绘图</h1><h2 id="基础图像容器Mat"><a href="#基础图像容器Mat" class="headerlink" title="基础图像容器Mat"></a>基础图像容器Mat</h2><p>Mat也就是矩阵的意思，在计算机图像上的图像都是由一块一块的矩阵累积而成的。  </p>
<h3 id="Mat结构和使用"><a href="#Mat结构和使用" class="headerlink" title="Mat结构和使用"></a>Mat结构和使用</h3><p>Mat是一个类，由两个数据部分组成：  </p>
<ul>
<li>1.<strong>矩阵头</strong>：矩阵尺寸、存储方法、存储地址等  </li>
<li>2.指向存储所有像素值的矩阵（根据所选存储方法的不同，矩阵可以是不同的维数）的<strong>指针</strong>  <blockquote>
<p>当用Mat构建一个对象，并把对象复制给其他Mat类的变量中的话（尽量减少这样的操作），每个变量存储的Mat类只复制<strong>信息头和矩阵指针</strong>，而不复制<strong>矩阵</strong>  </p>
</blockquote>
</li>
</ul>
<p><strong>总结</strong>：<br>1.OpenCV函数中输出图像的内存分配是自动完成的（如果不特别指定的话）<br>2.使用OpenCV的C++接口时不需要考虑内存释放问题<br>3.赋值运算符和拷贝构造函数只复制信息头<br>4.使用函数clone()或者copyTo()来复制一幅图像矩阵  </p>
<h3 id="像素值的存储方法"><a href="#像素值的存储方法" class="headerlink" title="像素值的存储方法"></a>像素值的存储方法</h3><p><strong>RGB</strong>颜色空间是最常用的一种颜色空间<br><strong>HSV</strong>和<strong>HLS</strong>把颜色分解成色调、饱和度和亮度/明度<br><strong>YCrCb</strong>在JPEG图像格式中广泛使用  </p>
<h3 id="显式创建Mat对象的七种方法"><a href="#显式创建Mat对象的七种方法" class="headerlink" title="显式创建Mat对象的七种方法"></a>显式创建Mat对象的七种方法</h3><p>1.使用Mat()构造函数  </p>
]]></content>
      <categories>
        <category>OpenCv</category>
      </categories>
      <tags>
        <tag>OpenCv</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Github</title>
    <url>/2020/03/25/Python%E7%88%AC%E8%99%AB-Github/</url>
    <content><![CDATA[<h1 id="Python爬虫之Github项目更新"><a href="#Python爬虫之Github项目更新" class="headerlink" title="Python爬虫之Github项目更新"></a>Python爬虫之Github项目更新</h1><a id="more"></a>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>三个问题:</strong>  </p>
<blockquote>
<p>1.如何获取网页资源<br>2.如何检测网页数据变化<br>3.如何自动打开网页  </p>
</blockquote>
<p><strong>常识</strong>：  </p>
<ul>
<li>输入<strong>本地路径</strong>打开的是自己电脑上的数据。  </li>
<li>输入<strong>网址</strong>打开的是别人电脑上（<strong>服务器</strong>）的数据。  </li>
<li>访问网址时，网页会下载到浏览器里。</li>
</ul>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><blockquote>
<p>1.如何获取网页资源 </p>
</blockquote>
<p><strong>接口API</strong>—–&gt;<strong>json</strong><br>(爬虫)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(xml)  </p>
<blockquote>
<p>2.如何检测网页数据变化   </p>
</blockquote>
<p>每次下载(<strong>Request</strong>)、对比变化、持续运行(<strong>while</strong>)  </p>
<blockquote>
<p>3.如何自动打开网页  </p>
</blockquote>
<p>使用内置模板来实现（<strong>webbrowser</strong>）  </p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1.打开PyCharm,创建一个项目<br><img src="/2020/03/25/Python%E7%88%AC%E8%99%AB-Github/1.jpg" alt>  </p>
]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库技术复习</title>
    <url>/2020/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h1><a id="more"></a>
]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>基础</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-2</title>
    <url>/2020/03/24/spring-boot-2/</url>
    <content><![CDATA[<h1 id="SpringBoot项目演示"><a href="#SpringBoot项目演示" class="headerlink" title="SpringBoot项目演示"></a>SpringBoot项目演示</h1><h2 id="导入github上的开源项目"><a href="#导入github上的开源项目" class="headerlink" title="导入github上的开源项目"></a>导入github上的开源项目</h2><blockquote>
<p>1.打开github并下载开源项目</p>
</blockquote>
<p><img src="/2020/03/24/spring-boot-2/1.jpg" alt></p>
<p><img src="/2020/03/24/spring-boot-2/2.jpg" alt></p>
<blockquote>
<p>2.打开IDEA,导入</p>
</blockquote>
<p>点击import<br><img src="/2020/03/24/spring-boot-2/3.jpg" alt></p>
<p>选择之前下载的项目<br><img src="/2020/03/24/spring-boot-2/4.jpg" alt></p>
<p>下一步<br><img src="/2020/03/24/spring-boot-2/5.jpg" alt></p>
<p>进入之后idea要自己下载相关配置环境<br><img src="/2020/03/24/spring-boot-2/6.jpg" alt></p>
<p>安装完需要安装lombok插件:<br>参考:<a href="https://jingyan.baidu.com/article/0a52e3f4e53ca1bf63ed725c.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/0a52e3f4e53ca1bf63ed725c.html</a>  </p>
<p>安装后可能还有错误:<br><img src="/2020/03/24/spring-boot-2/7.jpg" alt><br>百度一下idea版本低需要改gradle版本:<br>更改:  </p>
<p>…..这里有问题尚未解决</p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot项目</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot-1</title>
    <url>/2020/03/17/spring-boot-1/</url>
    <content><![CDATA[<h1 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h1><a id="more"></a>

<h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><h3 id="Spring框架优缺点"><a href="#Spring框架优缺点" class="headerlink" title="Spring框架优缺点"></a>Spring框架优缺点</h3><p>Spring的优点分析:  </p>
<p>Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。</p>
<p>Spring的缺点分析:<br>配置非常麻烦。耗费时间。版本冲突问题很难解决。  </p>
<h3 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h3><ul>
<li>基于spring开发，入门简单  </li>
<li>无需xml配置，开箱即用  </li>
<li>提供了大型项目中常见的非功能性特征，如：嵌入式服务器、安全、指标，健康检测、外部配置等  </li>
<li>SpringBoot不是对Spring功能上的增强，而是提供了一种<strong>快速使用Spring</strong>的方式  </li>
</ul>
<p>SpringBoot<strong>核心功能：</strong>  </p>
<ul>
<li><p>起步依赖</p>
<p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p>
<p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p>
</li>
<li><p>自动配置</p>
<p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。  </p>
</li>
</ul>
<h2 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h2><h3 id="1-创建Maven工程"><a href="#1-创建Maven工程" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h3><p><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C1.jpg" alt><br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C2.jpg" alt><br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C3.png" alt>  </p>
<h3 id="2-添加SpringBoot的起步依赖"><a href="#2-添加SpringBoot的起步依赖" class="headerlink" title="2.添加SpringBoot的起步依赖"></a>2.添加SpringBoot的起步依赖</h3><p>SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parent</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">![](spring-boot-1\4.jpg)</span><br><span class="line"></span><br><span class="line">### 3.编写SpringBoot引导类  </span><br><span class="line"></span><br><span class="line">要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.itheima;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class MySpringBootApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MySpringBootApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C5.png" alt> </p>
<p>运行main方法<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C6.jpg" alt><br>以运行Tomcat：<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C7.jpg" alt></p>
<p>以上完成了springboot的环境基本配置  </p>
<h3 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h3><p>在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot 访问成功!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C8.jpg" alt><br>运行后访问localhost:8080/quick:<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C9.jpg" alt></p>
<h2 id="SpringBoot工程热部署"><a href="#SpringBoot工程热部署" class="headerlink" title="SpringBoot工程热部署"></a>SpringBoot工程热部署</h2><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大量的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称之为热部署。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：IDEA进行SpringBoot热部署失败原因</p>
<p>出现这种情况，并不是热部署配置问题，其根本原因是因为Intellij IEDA默认情况下不会自动编译，需要对IDEA进行自动编译的设置，如下：<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C10.jpg" alt></p>
<p>然后 Shift+Ctrl+Alt+/，选择Registry<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C11.jpg" alt></p>
<p>其实<strong>热部署</strong>就是在运行时对代码修改服务器方面也直接修改。</p>
<h2 id="IDEA快速创建SpringBoot"><a href="#IDEA快速创建SpringBoot" class="headerlink" title="IDEA快速创建SpringBoot"></a>IDEA快速创建SpringBoot</h2><p><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C12.jpg" alt></p>
<p><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C13.jpg" alt><br>这一步可以根据你的项目进行适当的勾选<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C14.jpg" alt><br>创建的结构如下<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C15.jpg" alt></p>
<p>创建Controller文件，访问测试<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C16.jpg" alt><br>结果如下<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C17.jpg" alt><br>完成springboot的快速创建  </p>
<p>更改Tomcat默认端口号：<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C18.jpg" alt><br>修改当前项目名称:<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C19.jpg" alt><br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C20.jpg" alt>  </p>
<h2 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h2><h3 id="SpringBoot配置文件类型和作用"><a href="#SpringBoot配置文件类型和作用" class="headerlink" title="SpringBoot配置文件类型和作用"></a>SpringBoot配置文件类型和作用</h3><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p>
<p>SpringBoot默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件</p>
<p>其中，application.properties文件是键值对类型的文件，之前一直在使用，所以此处不在对properties文件的格式进行阐述。除了properties文件外，SpringBoot还可以使用yml文件进行配置，下面对yml文件进行讲解。</p>
<h3 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h3><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C/C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简洁。</p>
<p>YML文件的扩展名可以使用.yml或者.yaml。</p>
<p><strong>yml配置文件的语法</strong>:  </p>
<blockquote>
<p>1.配置普通数据  </p>
</blockquote>
<ul>
<li><p>语法： key: value</p>
</li>
<li><p>示例代码：</p>
</li>
<li><pre><code class="yaml"><span class="attr">name:</span> <span class="string">haohao</span>
<span class="string"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注意：value之前有一个空格</span><br><span class="line"></span><br><span class="line">&gt; 2.配置对象数据</span><br><span class="line">- 语法： </span><br><span class="line"></span><br><span class="line">  ​	key: </span><br><span class="line"></span><br><span class="line">  ​		key1: value1</span><br><span class="line"></span><br><span class="line">  ​		key2: value2</span><br><span class="line"></span><br><span class="line">  ​	或者：</span><br><span class="line"></span><br><span class="line">  ​	key: &#123;key1: value1,key2: value2&#125;</span><br><span class="line"></span><br><span class="line">- 示例代码：</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;yaml</span><br><span class="line">  person:</span><br><span class="line">    name: haohao</span><br><span class="line">    age: 31</span><br><span class="line">    addr: beijing</span><br><span class="line"></span><br><span class="line">  #或者</span><br><span class="line"></span><br><span class="line">  person: &#123;name: haohao,age: 31,addr: beijing&#125;</span><br></pre></td></tr></table></figure></span></code></pre>
</li>
<li><p>注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别  </p>
</li>
</ul>
<blockquote>
<p>3.配置Map数据</p>
</blockquote>
<ul>
<li>同上面的对象写法  </li>
</ul>
<blockquote>
<p>4.配置数组（List、Set）数据</p>
</blockquote>
<ul>
<li><p>语法： </p>
<p>​    key: </p>
<p>​        - value1</p>
<p>​        - value2</p>
<p>或者：</p>
<p>​    key: [value1,value2]</p>
</li>
<li><p>示例代码：</p>
</li>
<li><pre><code class="yaml"><span class="attr">city:</span>
  <span class="bullet">-</span> <span class="string">beijing</span>
  <span class="bullet">-</span> <span class="string">tianjin</span>
  <span class="bullet">-</span> <span class="string">shanghai</span>
  <span class="bullet">-</span> <span class="string">chongqing</span>

<span class="comment">#或者</span>

<span class="attr">city:</span> <span class="string">[beijing,tianjin,shanghai,chongqing]</span>

<span class="comment">#集合中的元素是对象形式</span>
<span class="attr">student:</span>
  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span>
    <span class="attr">age:</span> <span class="number">18</span>
    <span class="attr">score:</span> <span class="number">100</span>
  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span>
    <span class="attr">age:</span> <span class="number">28</span>
    <span class="attr">score:</span> <span class="number">88</span>
  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wangwu</span>
    <span class="attr">age:</span> <span class="number">38</span>
    <span class="attr">score:</span> <span class="number">90</span>
<span class="string"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注意：value1与之间的 - 之间存在一个空格</span><br><span class="line"></span><br><span class="line">如下图：</span><br><span class="line">![](spring-boot-1\21.jpg) </span><br><span class="line">![](spring-boot-1\22.jpg) </span><br><span class="line"></span><br><span class="line">### 使用注解@Value映射</span><br><span class="line">我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">application.properties配置如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;properties</span><br><span class="line">person:</span><br><span class="line">  name: zhangsan</span><br><span class="line">  age: 18</span><br></pre></td></tr></table></figure></span>
</code></pre>
</li>
</ul>
<p>或者，application.yml配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>实体Bean代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot 访问成功! name="</span>+name+<span class="string">",age="</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如图:<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C23.jpg" alt><br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C24.jpg" alt></p>
<h3 id="使用注解-ConfigurationProperties映射"><a href="#使用注解-ConfigurationProperties映射" class="headerlink" title="使用注解@ConfigurationProperties映射"></a>使用注解@ConfigurationProperties映射</h3><p>通过注解@ConfigurationProperties(prefix=”配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射</p>
<p>yml配置如下:<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C25.jpg" alt><br>实体Bean代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QController2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick2"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取配置信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name: "</span>+name+<span class="string">", age: "</span>+age+<span class="string">", addr: "</span>+addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试:<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C26.jpg" alt></p>
<p>注意：使用@ConfigurationProperties方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方法才可以，而使用@Value注解修饰的字段不需要提供set方法</p>
<p>如果你的IDEA警告：<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C27.jpg" alt><br>进入页面复制<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C28.jpg" alt><br>进入xml文件中配置<br><img src="/2020/03/17/spring-boot-1/spring-boot-1%5C29.jpg" alt></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机数据结构复习</title>
    <url>/2020/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><a id="more"></a>  
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2>]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统复习</title>
    <url>/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><a id="more"></a>  

<h2 id="操作系统引论"><a href="#操作系统引论" class="headerlink" title="操作系统引论"></a>操作系统引论</h2><p>操作系统OS是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。  </p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>作为用户与计算机硬件系统之间的接口  </li>
<li>作为计算机系统资源的管理者  </li>
<li>实现了对计算机资源的抽象  </li>
</ul>
<h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><p><strong>1.并发性</strong><br>引入进程：提高了系统资源的利用率和系统吞吐量，并改善了系统的性能。<br>引入线程：对它的调度所付出的开销比进程小得多，能更高效地提高系统内多个程序间并发执行的程度。  </p>
<p><strong>2.共享性</strong><br>互斥共享方式：在一段时间内只允许一个进程访问的资源称为临界资源或独占资源。<br>同时访问方式：允许在一段时间内由多个进程同时对它们进行访问。  </p>
<p><strong>3.虚拟技术</strong><br>时分复用技术：利用处理机的空闲时间运行其他程序，提高处理机的利用率。<br>空分复用技术：利用存储器的空闲空间存放其他程序，提高内存的利用率。   </p>
<p><strong>4.异步性</strong><br>进程以不可预知的速度向前推进  </p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>1.程序的顺序执行：<br>按照某种先后次序顺序执行，仅当前一程序执行完后，才能执行后继操作。<br>特征：顺序性、封闭性、可再现性。<br><strong>前驱图</strong>：描述进程之间执行的前后关系。 </p>
<p>2.程序的并发执行：<br>特征：间断性、失去封闭性、不可再现性  </p>
<p><strong>进程实体</strong>：由程序段、相关的数据段和PCB组成，所谓创建和撤销进程实际是对其中的PCB的创建和撤销。（PCB：进程控制块Process Control Block）<br><strong>进程的特征</strong>：动态性、并发性、独立性、异步性<br><strong>进程定义</strong>：是进程实体的运行过程，是系统进行资源分配和调度的一个独立单元。 </p>
<p>进程的<strong>三种基本状态</strong>：就绪状态、执行状态、阻塞状态（阻塞典型事件：请求I/O，申请缓冲空间等）。<br>进程的三种基本状态及其<strong>转换图</strong>:<br><img src="/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%5C1.jpg" alt>   </p>
<p><strong>挂起状态</strong>：进程处于静止状态，暂停执行（执行状态下挂起），暂不接受调度（就绪状态下挂起）。<br>进程的五种基本状态及其转换图。<br><img src="/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%5C2.png" alt>   </p>
<p>具有创建、终止和挂起状态的<strong>进程状态图</strong>：<br><img src="/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%5C3.jpg" alt>  </p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>为作业创建进程，撤销已结束的进程，控制进程在运行过程中的状态转换。  </p>
<h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>由于操作系统中的进程运行具有异步的特征，因此需要对进程进行同步，协调多个进程的运行。  </p>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>实现相互合作的进程之间的信息交换。同一计算机系统上的进程之间是源进程发送命令，直接将消息挂载到目标进程的消息队列中，目标进程利用接受命令从消息队列中取消息。</p>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>分为作业调度和进程调度。二者分别是调度过程的两步。  </p>
<ul>
<li>第一步，作业调度就是按照一定的调度算法将作业调入内存，并为之创建进程，并将进程放入就绪队列中。  </li>
<li>第二步，进程调度是将就绪队列中的进程按照一定的算法取出并分配cpu资源，使之处于运行态。  </li>
</ul>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程与进程的比较<br><strong>①调度</strong><br>线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。  </p>
<p><strong>②并发性</strong><br>不仅进程之间可以并发执行，而且在一个进程中的多个线程之间亦可并发执行。  </p>
<p><strong>③拥有资源</strong><br>进程都可以拥有资源，是系统中拥有资源的一个基本单位。一般而言，线程自己不拥有系统资源(也有一点必不可少的资源)，但它可以访问其隶属进程的资源。  </p>
<p><strong>④系统开销</strong><br>由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。  </p>
<h2 id="处理机调度与死锁"><a href="#处理机调度与死锁" class="headerlink" title="处理机调度与死锁"></a>处理机调度与死锁</h2>]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络原理复习</title>
    <url>/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="计算机网络原理"><a href="#计算机网络原理" class="headerlink" title="计算机网络原理"></a>计算机网络原理</h1><a id="more"></a>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>1.<strong>计算机网络</strong>(网络)把许多<strong>计算机</strong>连接在一起，而<strong>互联网</strong>则把许多网络连接在一起是<strong>网络的网络</strong>。<strong>因特尔</strong>是世界上最大的互联网。</p>
<p>2.以大写字母I开始的Interent（<strong>因特网</strong>）是<strong>专有</strong>名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用的是<strong>TCP/IP</strong>协议族 作为通信规则，且其前身是美国的ARPANET。  </p>
<p>3.以小写字母i开始的internet(<strong>互联网或互连网</strong>)是<strong>通用</strong>名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议（通信规则）可以是<strong>任意</strong>的。  </p>
<p>4.按作用<strong>范围</strong>不同，计算机网络分为：广域网WAN,城域网MAN，局域网LAN和个人区域网PAN。  </p>
<p>5.网络协议主要由三个要素组成：<br>（1）<strong>语法</strong>：即数据和控制信息的结构或者格式；<br>（2）<strong>语义</strong>：即需要发出何种控制信息，完成何种动作以及做出何种响应。<br>（3）<strong>同步</strong>：即事件实现顺序的详细说明。</p>
<p>6.<strong>五层协议</strong>的体系结构由：<strong>应用层，运输层，网络层，数据链路层和物理层</strong>。  </p>
<p>7.运输层最重要的协议是：传输控制协议<strong>TCP</strong>和用户数据报协议<strong>UDP</strong>，而网络层最重要的协议是网络协议<strong>IP</strong>。  </p>
<p><img src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/1.jpg" alt>  </p>
<h1 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h1><p>简要分析:<br><img src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/2.jpg" alt></p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>1.物理层的主要任务：描述为确定与<strong>传输媒体</strong>的接口有关的一些特性。</p>
<p><strong>(1)机械特性</strong>：接口所用接线器的形状和尺寸，引脚数目和排列，固定和锁定装置等，平时常见的各种规格的插件都有严格的标准化的规定。  </p>
<p><strong>(2)电气特性</strong>：接口电缆上的各条线上出现的电压范围。  </p>
<p><strong>(3)功能特性</strong>：某条线上出现的某一电平的点电压表示何种意义；   </p>
<p><strong>(4)过程特性</strong>：指明对不同功能的各种可能事件的出现顺序。  </p>
<p>2.通信的双方信息交互的方式来看，有三中基本方式：<br>单向通信（广播）<br>双向交替通信（<strong>半双工</strong>_对讲机）<br>双向同时通信（全双工 _电话）  </p>
<p>3.编码方式：  </p>
<ul>
<li><strong>不归零制</strong>（正电平1/负0）  </li>
<li><strong>归零制度</strong>（正脉冲1/负0）  </li>
<li><strong>曼彻斯特编码</strong>（位周期中心的向上跳变为0/下1）  </li>
<li><strong>差分曼彻斯特编码</strong>（每一位中心处有跳变，开始辩解有跳变为0，无跳变1）  </li>
</ul>
<p>4.物理层下面的<strong>传输媒体（介质）</strong>：不属于任何一层。包括有：<br><strong>引导性传输媒体</strong>：双绞、同轴电缆、光缆<br><strong>非引导性传输媒体</strong>：短波、微波、红外线  </p>
<p>5.信道复用技术：<br><strong>频分复用</strong>：（一样的时间占有不不同资源）<br><strong>时分复用</strong>：（不同时间使用同样资源）<br>统计时分复用、波分复用（WDM）、码分复用（CDM）  </p>
<p>6.物理层故障：连接问题  </p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p><strong>数据链路层</strong>最基本的服务是将源计算机网络层来的数据可靠的传输到相邻节点的目标计算机的网络层。  </p>
<p>1.点对点信道（ppp）的数据链路层的协议数据单元–<strong>帧</strong>  </p>
<p>2.数据链路层协议有许多，三个基本问题是共同的<br><strong>封装成帧</strong><br><strong>透明传输</strong><br><strong>差错检测</strong>  </p>
<p>3.局域网的数据链路层拆成两个子层，即<strong>逻辑链路层（LLC）</strong>子层+<strong>媒体接入控制（MAC）</strong>子层  </p>
<p>4.以太网采用的协议是：具有<strong>冲突检测</strong>的<strong>载波监听多点接入(CSMA/CD)</strong>。协议的要点是：<strong>发送前先监听，边发送边监听，一旦发现总线出现了碰撞，就立即停止发送</strong>。  </p>
<p>5.使用<strong>集线器</strong>可以在<strong>物理层</strong>扩展以太网（半双工），使用<strong>网桥</strong>可以在<strong>数据链路层</strong>扩展以太网（半双工），网桥转发帧时，不改变帧的源地址。网桥优点：对帧进行转发过滤，增大吞吐量。扩大网络物理范围，提高可靠性，可互连不同物理层，不同MAC子层和不同速率的以太网。 网桥缺点：增加时延，可能产生广播风暴。  </p>
<p>6.数据链路层故障：  </p>
<ul>
<li>MAC地址冲突导致不能上网  </li>
<li>交换机与计算机的网卡带宽协商不一致，网速不一致导致通不了。  </li>
<li>ADSL欠费导致不通。  </li>
<li>将计算机连接到错误的VLAN。 </li>
</ul>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>1.<strong>TCP/IP</strong>体系中的网络层向上只提供简单灵活的、无连接，尽最大努力交付的数据报服务。网络层不提供服务质量的承诺，不保证分组交付的时限，<strong>进程</strong>之间的通信的<strong>可靠性</strong>由<strong>运输层</strong>负责。  </p>
<p>2.一个<strong>IP地址</strong>在整个因特网范围内是唯一的，分类的IP地址包括<strong>A类（1~126）</strong>、<strong>B类（128~191）</strong>、<strong>C类（192~223单播地址）</strong>、<strong>D类（多播地址）</strong>。  </p>
<p>3.分类的IP地址由<strong>网络号字段</strong>和<strong>主机号字段</strong>组成。  </p>
<p>4.地址解析协议<strong>ARP（Address Resolution Protocol）</strong>把IP地址解析为<strong>硬件地址</strong>，它解决<strong>同一个局域网的主机或路由器的IP地址和硬件地址的映射问题</strong>，是一种解决地址问题的协议。以目标IP地址为线索，用来定位一个下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一链路上时，可以通过ARP查找下一跳路由器的MAC地址，不过ARP只适用于IPV4，不能用于IPV6，IPV6中可以用ICMPV6替代ARP发送邻居搜索消息。  </p>
<p>5.路由选择协议有两大类：<strong>内部网关协议</strong>（RIP和OSPE）和<strong>外部网关协议</strong>（BGP-4）。  </p>
<p>6.网际控制报文协议<strong>ICMP</strong>（Internet Control Message Protocol ）控制报文协议。是IP层协议，ICMP报文作为IP数据报的数据，加上首部后组成IP数据报发送出去，使用ICMP并不是实现了可靠传输。ICMP允许主机或者路由器<strong>报告差错</strong>情况和<strong>提供有关异常</strong>的情况报告。  </p>
<p>网络层上是ip地址的计算  </p>
<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><p>1.运输层有两个协议<strong>TCP</strong>和<strong>UDP</strong>  </p>
<p>2.<strong>UDP特点</strong>：无连接、尽最大努力交付、面向报文、无拥塞控制、支持一对一，多对一，一对多，多对多的交互通信。首部开销小。  </p>
<p>3.<strong>TCP特点</strong>：面向连接，每一条TCP连接只能是点对点、提供可靠的交付服务，提供全双工通信、面向字节流。  </p>
<p>4.TCP拥塞控制采用四种算法：<strong>慢开始、拥塞避免、快重传、快恢复</strong>。  </p>
<p>5.传输有<strong>三个连接</strong>：连接建立、数据传送、连接释放。  </p>
<p>6.TCP连接<strong>建立</strong>采用<strong>三次</strong>握手机制，连接<strong>释放</strong>采用<strong>四次</strong>握手机制。  </p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>1.<strong>文件传送协议FTP</strong>使用<strong>TCP</strong>可靠传输服务。FTP使用客户服务器方式，一个FTP服务器进程可同时为多个客户进程提供服务。在进行文件传输时，FTP的客户和服务器之间要建立两个并行的TCP连接，控制连接和数据连接，实际用于传输文件的是<strong>数据连接</strong>。  </p>
<p>2.万维网使用<strong>统一资源定位符URL</strong>来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符<strong>URL</strong>。</p>
<p>参考：<a href="https://blog.csdn.net/qq_35260622/article/details/51672296" target="_blank" rel="noopener">https://blog.csdn.net/qq_35260622/article/details/51672296</a></p>
]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理复习</title>
    <url>/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><a id="more"></a>

<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>正数的原码等于自身的二进制数，负数的原码第一位为 1(符号位，表示负数)，后面为自身的二进制数。</p>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>正数的反码等于自身的二进制数，负数的反码符号位不动，其余各位按位取反</p>
<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>正数的补码等于自身的二进制数，负数的补码是在反码的基础上+1</p>
<h3 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h3><p>无论正负数，只要将其<strong>补码</strong>的符号位取反即可</p>
<hr>
<p>在计算机中，最适合数字<strong>加减运算</strong>的数字编码是<strong>补码</strong>，最适合表示<strong>浮点数阶码</strong>的数字编码是<strong>移码</strong>。</p>
<p>例如：</p>
<p><img src="/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/1.jpg" alt="原码和补码"> </p>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p><img src="/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/2.jpg" alt="cpu"> </p>
<h3 id="1运算器"><a href="#1运算器" class="headerlink" title="1运算器"></a>1运算器</h3><p>1.算术逻辑单元<br>2.累加寄存器<br>3.数据缓冲寄存器<br>4.状态条件寄存器</p>
<h3 id="2控制器"><a href="#2控制器" class="headerlink" title="2控制器"></a>2控制器</h3><ul>
<li>不仅要保证程序的正确执行，而且要能够处理异常事件</li>
</ul>
<p>1.程序计数器<br>2.指令寄存器<br>3.指令编译器<br>4.时序部件</p>
<h3 id="3寄存器"><a href="#3寄存器" class="headerlink" title="3寄存器"></a>3寄存器</h3><h3 id="4内部总线"><a href="#4内部总线" class="headerlink" title="4内部总线"></a>4内部总线</h3><h2 id="计算机体系结构分类"><a href="#计算机体系结构分类" class="headerlink" title="计算机体系结构分类"></a>计算机体系结构分类</h2><p>1.单指令流单数据流  <strong>SISD</strong><br>2.单指令流多数据流  <strong>SIMD</strong><br>3.多指令流单数据流  <strong>MISD</strong><br>4.多指令流多数据流  <strong>MIMD</strong>  </p>
<h2 id="指令系统类型"><a href="#指令系统类型" class="headerlink" title="指令系统类型"></a>指令系统类型</h2><p>1.CISC（复杂）<br>指令数量多，使用频率差别大，可变长格式<br>2.RISC （精简）<br>指令数量少，寻址方式少，有效支持高级语言  </p>
<h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><p><img src="/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/3.jpg" alt="cpu"> </p>
<h2 id="主存分类"><a href="#主存分类" class="headerlink" title="主存分类"></a>主存分类</h2><h3 id="随机存取存储器"><a href="#随机存取存储器" class="headerlink" title="随机存取存储器"></a>随机存取存储器</h3><ul>
<li>DRAM：动态RAM  </li>
<li>SRAM：静态RAM<h3 id="只读存储器"><a href="#只读存储器" class="headerlink" title="只读存储器"></a>只读存储器</h3></li>
<li>MROM  </li>
<li>PROM  </li>
<li>EPROM  </li>
<li>闪速存储器：闪存  </li>
</ul>
<h2 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h2><h3 id="循环冗余校验码CRC"><a href="#循环冗余校验码CRC" class="headerlink" title="循环冗余校验码CRC"></a>循环冗余校验码CRC</h3><blockquote>
<p>模2除法：是指在做除法运算的过程中不计其进位的除法  </p>
</blockquote>
<p><img src="/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/4.jpg" alt="cpu"> </p>
<h3 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a>海明校验码</h3><p><img src="/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/5.jpg" alt="cpu"> </p>
]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>基础</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>大学人工智能复习</title>
    <url>/2020/03/08/%E5%A4%A7%E5%AD%A6%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>OpenCv日记-0</title>
    <url>/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/</url>
    <content><![CDATA[<h1 id="OpenCv日记-lt-0-gt"><a href="#OpenCv日记-lt-0-gt" class="headerlink" title="OpenCv日记&lt;0&gt;"></a>OpenCv日记&lt;0&gt;</h1><p>OpenCV基础和基本显示函数</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>OpenCv</strong>是开源的计算机视觉库。考研时买了一本《OpenCv3编程入门》自学了一段时间，对其中的图像处理和计算机视觉相关知识有了一定的认识。不过现在要重新进行学习和认识，参考的书依旧是这本《OpenCv3编程入门》，我会把我在Opencv上所学的知识在博客中进行记录。OpenCv概念什么的不在阐述。</p>
<h2 id="OpenCv安装和环境配置"><a href="#OpenCv安装和环境配置" class="headerlink" title="OpenCv安装和环境配置"></a>OpenCv安装和环境配置</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>首先在官网上下载OpenCV SDK<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/1.jpg" alt="下载">  </li>
<li>安装页面大概这样:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/2.jpg" alt="安装页面"><br>直接安装  </li>
<li>安装:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/3.jpg" alt="安装页面">  <h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3></li>
<li>修改环境中的PATH：<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/4.jpg" alt="安装页面"><br>这里要说一下根据你的vs版本不同配置的vc10、vc4不同，我使用的是vs2015所以用的是vc14  <h3 id="配置Visual-Studio"><a href="#配置Visual-Studio" class="headerlink" title="配置Visual Studio"></a>配置Visual Studio</h3></li>
</ul>
<p><strong>工程包含环境配置</strong>  </p>
<ul>
<li>先创建一个空项目<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/5.jpg" alt="安装页面">  </li>
<li>打开属性管理器<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/7.jpg" alt="安装页面">  </li>
<li>选择这个<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/8.jpg" alt="安装页面"> </li>
<li>VC++目录中的包含目录 添加三条路径：<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/9.jpg" alt="安装页面">    </li>
</ul>
<p><strong>工程库环境配置</strong>  </p>
<ul>
<li>配置<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/10.jpg" alt="安装页面">  </li>
</ul>
<p><strong>链接库配置</strong></p>
<ul>
<li>配置<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/11.jpg" alt="安装页面"><br>完成配置，准备测试，代码如下:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/12.jpg" alt="安装页面">  </li>
<li>测试成功！<blockquote>
<p>注意：此时要用x64编译  </p>
</blockquote>
</li>
</ul>
<p><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/13.jpg" alt="安装页面"> </p>
<hr>
<h2 id="安装CMake"><a href="#安装CMake" class="headerlink" title="安装CMake"></a>安装CMake</h2><p>说实在不知道这一步是干啥的！非常容易出错的一步，我没有安装编译，暂时留给自己一个坑！</p>
<h2 id="HighGUI模块"><a href="#HighGUI模块" class="headerlink" title="HighGUI模块"></a>HighGUI模块</h2><p>在使用OpenCv时的标配是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include&quot;opencv2&#x2F;core&#x2F;core.hpp&quot;  </span><br><span class="line">include&quot;opencv2&#x2F;highgui&#x2F;highgui.hpp&quot;  </span><br><span class="line">&#x2F;&#x2F;也可以直接</span><br><span class="line">include&quot;opencv2&#x2F;opencv.hpp&quot;</span><br><span class="line">using namespace cv;</span><br></pre></td></tr></table></figure>
<h3 id="图像载入显示"><a href="#图像载入显示" class="headerlink" title="图像载入显示:"></a>图像载入显示:</h3><ul>
<li><strong>图像载入: imread()函数</strong><br>函数原型: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mat imread(const string&amp; filename,int flag &#x3D; 1)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>filename</strong>:是我们需要填入的图片路径<br><strong>flag</strong>:指定颜色类型，默认为1，指的是3通道的彩色图像，当值为0时则为灰度图像。</p>
<ul>
<li><strong>图像显示:imshow()函数</strong><br>函数原型:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void imshow(const string&amp; winname,InputArray mat)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>winname</strong>:填需要显示的窗口标识名称.<br><strong>mat</strong>:InputArray类型的mat，填需要显示的图像  </p>
<ul>
<li><strong>创建窗口:namedWindow()函数</strong><br>原型:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void namedWindow(const string&amp; winname,int flags&#x3D;WINDOW_AUTOSIZE);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>参数1</strong>: 窗口名称<br><strong>参数2</strong>: WINDOW_NORMAL是用户可以改变窗口大小，WINDOW_AUTOSIZE不能改变大小自适应,WINDOW_OPENGL窗口会支持OpenGL  </p>
<ul>
<li><strong>输出图像到文件:imwrite()函数</strong><br>函数原型：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool imwrite(const string&amp; filename,InputArray img,const vector&lt;int&gt; &amp; params&#x3D;vector&lt;int&gt;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>参数1</strong>:文件名<br><strong>参数2</strong>:Mat类型数据<br><strong>参数3</strong>:特定格式参数编码  </p>
<h3 id="滑动条的创建和使用"><a href="#滑动条的创建和使用" class="headerlink" title="滑动条的创建和使用"></a>滑动条的创建和使用</h3><ul>
<li><strong>创建滑动条:createTrackbar()函数</strong><br>原型:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int createTrackbar(const string&amp; trackbarname,</span><br><span class="line">const string&amp; winname,int * value,int count,</span><br><span class="line">TrackbarCallback onChange&#x3D;0,void * userdata&#x3D;0);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>参数1</strong>:轨迹条的名字<br><strong>参数2</strong>：表示轨迹条会依附到哪个窗口上，应该用namedWindow()函数创建某个窗口<br><strong>参数3</strong>：表示滑块的位置，在初始时应是该变量当前的值<br><strong>参数4</strong>：最大值位置，最小值始终为0<br><strong>参数5</strong>：这是一个回调函数，<strong>很有用</strong><br><strong>参数6</strong>：不介绍  </p>
<p>利用createTrackbar()函数实例:<br>效果：<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/14.jpg" alt="效果"><br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/15.jpg" alt="效果"><br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/16.jpg" alt="效果"><br>代码如下: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if 1</span><br><span class="line"></span><br><span class="line">#include &quot;opencv2&#x2F;opencv.hpp&quot;</span><br><span class="line">#include&quot;iostream&quot;</span><br><span class="line">using namespace cv;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;变量</span><br><span class="line">double g_A_v;</span><br><span class="line">double g_B_v;</span><br><span class="line">int g_value_control;</span><br><span class="line">const int g_value &#x3D; 100;</span><br><span class="line">Mat img0;</span><br><span class="line">Mat img1;</span><br><span class="line">Mat imgd;</span><br><span class="line"></span><br><span class="line">void on_Trackbar(int, void *)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;求出当前alpha的值相对于最大值的比例</span><br><span class="line">	g_A_v &#x3D; (double)g_value_control &#x2F; g_value;</span><br><span class="line">	&#x2F;&#x2F;则beta值为1减去alpha的值</span><br><span class="line">	g_B_v &#x3D; (1.0 - g_A_v);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;根据alpha和beta值进行线性混合</span><br><span class="line">	addWeighted(img0, g_A_v, img1, g_B_v, 0.0, imgd);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;显示效果图</span><br><span class="line">	imshow(&quot;createTrackbar()函数实例&quot;, imgd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;载入图片,判断!</span><br><span class="line">	img0 &#x3D; imread(&quot;gays.jpg&quot;);</span><br><span class="line">	img1 &#x3D; imread(&quot;gays1.jpg&quot;);</span><br><span class="line">	if (!img0.data) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;读取第一个图片失败!&quot; &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	if (!img1.data) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;读取第二个图片失败!&quot; &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;设置滑动条的初始值</span><br><span class="line">	g_value_control &#x3D; 70;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗体</span><br><span class="line">	namedWindow(&quot;createTrackbar()函数实例&quot;, 1);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;在创建的窗体中创建一个滑动条控件</span><br><span class="line">	char Trackbarname[50];</span><br><span class="line">	&#x2F;&#x2F;格式化输入</span><br><span class="line">	sprintf(Trackbarname, &quot;透明值 %d&quot;, g_value_control);</span><br><span class="line"></span><br><span class="line">	createTrackbar(Trackbarname, &quot;createTrackbar()函数实例&quot;, &amp;g_value_control, g_value, on_Trackbar);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;结果在回调函数中显示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	waitKey(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<h2 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h2><p>1.SetMouseCallback() 函数</p>
<p>函数原型： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void setMouseCallback(const string &amp; winname,MouseCallback onMouse,void* userdata&#x3D;0)</span><br></pre></td></tr></table></figure>
<p><strong>参数1</strong>：窗口的名字，字符串型<br><strong>参数2</strong>：MouseCallback类型的onMouse，指定窗口里每次鼠标事件发生的时候，被调用的函数指针。<br><strong>参数3</strong>：定义的传递到回调函数的参数，默认值0。  </p>
<p>实例：<br>运行之后如图:<br><img src="/2020/03/07/OpenCv%E6%97%A5%E8%AE%B0-0/17.jpg" alt="效果"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;头文件</span><br><span class="line">#include &quot;opencv2&#x2F;opencv.hpp&quot;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义窗口标题的宏</span><br><span class="line">#define WINDOW_NAME &quot;【程序窗口】&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;全局变量的声明</span><br><span class="line">Rect g_rectangle;</span><br><span class="line">bool g_d&#x3D;false;		&#x2F;&#x2F;是否进行绘制</span><br><span class="line">RNG g_rng(12345);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;矩形绘制函数DrawRectangle()函数</span><br><span class="line">void DrawRectangle(Mat &amp; img,Rect box)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;随机颜色</span><br><span class="line">	rectangle(img, box.tl(), box.br(), Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;鼠标回调函数 on_MouseHeandle()函数</span><br><span class="line">void on_MouseHandle(int event, int x, int y, int flags, void * param)</span><br><span class="line">&#123;</span><br><span class="line">	Mat &amp; image &#x3D; *(Mat*)param;</span><br><span class="line">	switch (event)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;鼠标移动消息</span><br><span class="line">	case EVENT_MOUSEMOVE:</span><br><span class="line">	&#123;</span><br><span class="line">		if (g_d) &#123;	&#x2F;&#x2F;如果是否进行绘制的标识符为真，则记录下长和宽到Rrectangle</span><br><span class="line">			g_rectangle.width &#x3D; x - g_rectangle.x;</span><br><span class="line">			g_rectangle.height &#x3D; y - g_rectangle.y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	break;</span><br><span class="line">	&#x2F;&#x2F;左键按下消息</span><br><span class="line">	case EVENT_LBUTTONDOWN:</span><br><span class="line">	&#123;</span><br><span class="line">		g_d &#x3D; true;</span><br><span class="line">		g_rectangle &#x3D; Rect(x, y, 0, 0);	&#x2F;&#x2F;记录起始点</span><br><span class="line">	&#125;</span><br><span class="line">	break;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;左键抬起消息</span><br><span class="line">	case EVENT_LBUTTONUP:</span><br><span class="line">	&#123;</span><br><span class="line">		g_d &#x3D; false;&#x2F;&#x2F;标识符为false</span><br><span class="line">		&#x2F;&#x2F;对宽和高小于0的处理</span><br><span class="line">		if (g_rectangle.width &lt; 0)</span><br><span class="line">		&#123;</span><br><span class="line">			g_rectangle.x +&#x3D; g_rectangle.width;</span><br><span class="line">			g_rectangle.width *&#x3D; -1;</span><br><span class="line">		&#125;</span><br><span class="line">		if (g_rectangle.height &lt; 0)</span><br><span class="line">		&#123;</span><br><span class="line">			g_rectangle.y +&#x3D; g_rectangle.height;</span><br><span class="line">			g_rectangle.height *&#x3D; -1;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;调用函数进行绘制</span><br><span class="line">		DrawRectangle(image, g_rectangle);</span><br><span class="line">	&#125;</span><br><span class="line">	break;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;main函数</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;准备参数</span><br><span class="line">	g_rectangle &#x3D; Rect(-1, -1, 0, 0);</span><br><span class="line">	Mat srcImage(600, 800, CV_8UC3), tempImage;</span><br><span class="line">	srcImage.copyTo(tempImage);</span><br><span class="line">	g_rectangle &#x3D; Rect(-1, -1, 0, 0);</span><br><span class="line">	srcImage &#x3D; Scalar::all(0);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置鼠标操作回调函数</span><br><span class="line">	namedWindow(WINDOW_NAME);</span><br><span class="line">	setMouseCallback(WINDOW_NAME, on_MouseHandle, (void*)&amp; srcImage);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;程序主循环，当进行绘制的标识符为真时，进行绘制</span><br><span class="line">	while (1)</span><br><span class="line">	&#123;</span><br><span class="line">		srcImage.copyTo(tempImage);&#x2F;&#x2F;复制原图到临时变量</span><br><span class="line">		if (g_d) &#123;</span><br><span class="line">			&#x2F;&#x2F;当进行绘制的标识符为真的时候，进行绘制</span><br><span class="line">			DrawRectangle(tempImage, g_rectangle);</span><br><span class="line">		&#125;</span><br><span class="line">		imshow(WINDOW_NAME, tempImage);</span><br><span class="line">		if (waitKey(10)&#x3D;&#x3D;27)</span><br><span class="line">		&#123;&#x2F;&#x2F;按下ESC键，程序退出</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="HighGUI图像的初步基本函数总结"><a href="#HighGUI图像的初步基本函数总结" class="headerlink" title="HighGUI图像的初步基本函数总结"></a>HighGUI图像的初步基本函数总结</h1><h2 id="imread-函数"><a href="#imread-函数" class="headerlink" title="imread 函数"></a>imread 函数</h2><p>读取文件中的图片到OpenCV中</p>
<h2 id="imshow-函数"><a href="#imshow-函数" class="headerlink" title="imshow 函数"></a>imshow 函数</h2><p>指定一个窗口显示一幅图像</p>
<h2 id="namedWindow-函数"><a href="#namedWindow-函数" class="headerlink" title="namedWindow 函数"></a>namedWindow 函数</h2><p>创建一个窗口</p>
<h2 id="imwrite-函数"><a href="#imwrite-函数" class="headerlink" title="imwrite 函数"></a>imwrite 函数</h2><p>输出图像到文件</p>
<h2 id="createTrackbar-函数"><a href="#createTrackbar-函数" class="headerlink" title="createTrackbar 函数"></a>createTrackbar 函数</h2><p>创建一个可以用于调整数值的轨迹条</p>
<h2 id="getTrackbarPos-函数"><a href="#getTrackbarPos-函数" class="headerlink" title="getTrackbarPos 函数"></a>getTrackbarPos 函数</h2><p>获取轨迹条的当前位置</p>
<h2 id="setMouseCallback-函数"><a href="#setMouseCallback-函数" class="headerlink" title="setMouseCallback 函数"></a>setMouseCallback 函数</h2><p>指定的窗口设置鼠标的回调函数</p>
]]></content>
      <categories>
        <category>OpenCv</category>
      </categories>
      <tags>
        <tag>OpenCv</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用和部署</title>
    <url>/2020/03/07/git%E4%BD%BF%E7%94%A8%E5%92%8C%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="git的使用和部署"><a href="#git的使用和部署" class="headerlink" title="git的使用和部署"></a>git的使用和部署</h1><a id="more"></a>
<h2 id="git的下载"><a href="#git的下载" class="headerlink" title="git的下载"></a>git的下载</h2><p>官网下载安装包: <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>下载的exe程序双击打开后一直next到finish结束</p>
<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>运行Git Bash Here  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;&#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>
<p>然后一直回车，这一步可以生成一个密匙保留在：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\8\.ssh\id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>这里面8对应的就是你的Windows用户名<br>用文本编译器打开，复制里面的内容并在你的github账户中建立一个ssh的秘钥。<br>具体步骤是在：setting-&gt;SSH and GPG keys-&gt;点击Add SSH Keys<br>然后在Git Bash Here 中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>
<p>提示内容一律yes<br>最后一步，全局配置你的git信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;qiuyeyijian&quot;     &#x2F;&#x2F; 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@gmail.com&quot; &#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>
<h2 id="github上传代码"><a href="#github上传代码" class="headerlink" title="github上传代码"></a>github上传代码</h2><ul>
<li>git操作  <blockquote>
<p>1.新建一个空的文件夹<br>2.在文件夹中进行git命令，先进行git初始化  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>进行github操作<blockquote>
<p>在github上创建一个仓库<br>创建好的仓库有两个地址：SSH地址、Http地址</p>
</blockquote>
</li>
<li>上传到github上<blockquote>
<p>将远程仓库克隆到本地</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &quot;SSH地址&quot;  &#x2F;&#x2F;将地址换成刚才复制的SSH地址</span><br></pre></td></tr></table></figure>
<blockquote>
<p>文件中会出来一个github仓库名的文件夹<br>把你要上传的代码项目内容放在此文件夹中<br>命令进入此文件夹: <strong>cd 文件名</strong><br><strong>依次输入以下代码</strong>  </p>
</blockquote>
</li>
</ul>
<p>//注意后面的‘点’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: git add .</span><br></pre></td></tr></table></figure>
<p>//first commit 换成你要提交的信息，而且这个命令不能少  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2: git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>
<p>//换成你要提交的GitHub仓库SSH地址  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3: git remote add origin SSH地址</span><br></pre></td></tr></table></figure>
<p>若第3步出错：提示出错信息：fatal: remote origin already exists.<br>解决方法:</p>
<blockquote>
<ul>
<li>先输入 git remote rm origin  </li>
<li>再输入 <strong>SSH地址后面是去掉git为github.io.git</strong> 就不会报错了！  </li>
<li>如果输入 git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’.<br>我们需要修改gitconfig文件的内容git config –global user.name “qiuyeyijian” // 你的github用户名，非昵称<br>git config –global user.email “<a href="mailto:xxx@gmail.com">xxx@gmail.com</a>“ // 填写你的github注册邮箱</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4: git push -u origin master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1、如果在github的remote上已经有了文件，会出现错误。此时应当先pull一下，即：  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>然后再进行： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>


<p>上传基本完成!<br>参考:<a href="https://www.jianshu.com/p/aab3801fe9a5" target="_blank" rel="noopener">https://www.jianshu.com/p/aab3801fe9a5</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于next主题的使用</title>
    <url>/2020/03/07/%E5%85%B3%E4%BA%8Enext%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="hexo博客next主题的使用总结"><a href="#hexo博客next主题的使用总结" class="headerlink" title="hexo博客next主题的使用总结"></a>hexo博客next主题的使用总结</h1><a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>使用git安装</strong></p>
<p>利用官网中的Git命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>



<p><strong>直接在github上下载</strong></p>
<p>下载后解压到你的站点的theme中，然后在站点配置文件config中修改theme的参数改为解压后的文件名字</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-改为中文"><a href="#1-改为中文" class="headerlink" title="1.改为中文"></a>1.改为中文</h3><p>在站点配置文件config中修改 language 的参数默认为en是英语，我们改为中文是zh-Hans</p>
<blockquote>
<p>注意属性之后一定要加上空格再加参数&gt;</p>
</blockquote>
<h3 id="2-增加标签页和分类页"><a href="#2-增加标签页和分类页" class="headerlink" title="2.增加标签页和分类页"></a>2.增加标签页和分类页</h3><p>在theme中既主题配置文件config中找到 menu 把tags和categories打开，在此之前一定要先创建目录：在站点执行语句：hexo new page “文件名”,你要创建的是tags 就文件名就是tags</p>
<blockquote>
<p>如果有：Cannot GET /tags/%20/ 的情况需要在next中的config配置文件中不要有空格!&gt;</p>
</blockquote>
<h3 id="3-更改头像"><a href="#3-更改头像" class="headerlink" title="3.更改头像"></a>3.更改头像</h3><p>在主题配置文件中config中找到avatar 修改路径即可</p>
<h3 id="4-设置全文阅读"><a href="#4-设置全文阅读" class="headerlink" title="4.设置全文阅读"></a>4.设置全文阅读</h3><p>在主题配置文件中找到auto_excerpt修改为true<br>或者在文章中加入&lt;!- more -&gt;</p>
<h3 id="5-添加动态背景"><a href="#5-添加动态背景" class="headerlink" title="5.添加动态背景"></a>5.添加动态背景</h3><p>主题配置文件中找到canvas<br>子选项中可以改为true打开</p>
<h3 id="6-增加搜索功能"><a href="#6-增加搜索功能" class="headerlink" title="6.增加搜索功能"></a>6.增加搜索功能</h3><p>利用next官网中的第三方服务<strong>Local Search</strong><br>按照其步骤：  </p>
<ul>
<li>先安装在站点中执行：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>在站点配置文件中添加以下语句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>在主题配置文件中更改：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true  &#x2F;&#x2F;false改为true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-添加数据统计"><a href="#7-添加数据统计" class="headerlink" title="7.添加数据统计"></a>7.添加数据统计</h3><p>还是在next官网的第三方工具中找到不蒜子统计进行配置<br>  enable属性的参数改为true就能够开启</p>
<h3 id="8-添加内容分享功能"><a href="#8-添加内容分享功能" class="headerlink" title="8.添加内容分享功能"></a>8.添加内容分享功能</h3><p>在主题配置文件中将 <strong>jiathis</strong> 属性参数由false改为 <strong>true</strong> </p>
<h3 id="9-加载动画"><a href="#9-加载动画" class="headerlink" title="9.加载动画"></a>9.加载动画</h3><p>在主题配置文件中找到<strong>pace</strong>属性值改为<strong>true</strong><br>下面的<strong>pace_theme</strong>改为上面列举的几种</p>
<h3 id="10-隐藏页面中的“强力驱动”"><a href="#10-隐藏页面中的“强力驱动”" class="headerlink" title="10.隐藏页面中的“强力驱动”"></a>10.隐藏页面中的“强力驱动”</h3><p>在主题文件中的<strong><em>layout/_partials/footer</em></strong><br>直接把if theme.footer.powered中的内容直接注释掉就行了</p>
<h3 id="11-标签和分类的多个演示"><a href="#11-标签和分类的多个演示" class="headerlink" title="11.标签和分类的多个演示"></a>11.标签和分类的多个演示</h3><p>对于<strong>标签</strong>来说具有同级分类使用的格式:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - 标签名1</span><br><span class="line">  - 标签名2</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">对于**分类**来说hexo没有同级分类:</span><br></pre></td></tr></table></figure>
<p>categories: </p>
<ul>
<li>分类1</li>
<li>子分类1<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 12.博客中添加图片</span><br><span class="line">- 下载一个插件:  </span><br><span class="line">可以在hexo目录下执行git命令：</span><br></pre></td></tr></table></figure>
npm install hexo-asset-image –save<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 把站点配置文件中的**post_asset_folder**属性改为**true**</span><br><span class="line">- 此时当你创建博文时 会在当前目录下出现一个和.md一样名字的文件夹，这个文件夹里面就是存储图片的   </span><br><span class="line"></span><br><span class="line">- 使用markdown语法:  xxxx就是文件夹名</span><br></pre></td></tr></table></figure>
<img src="/2020/03/07/%E5%85%B3%E4%BA%8Enext%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%9B%BE%E7%89%87%E5%90%8D.jpg" alt="你想输入的替代文字"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果出现图片在hexo s 后不加载，解决方案:</span><br><span class="line">&gt; 本人第一次搞也是出了很大问题，在网上找了很多方法最后找到这个：https:&#x2F;&#x2F;blog.csdn.net&#x2F;xjm850552586&#x2F;article&#x2F;details&#x2F;84101345?depth_1-utm_source&#x3D;distribute.pc_relevant.none-task&amp;utm_source&#x3D;distribute.pc_relevant.none-task  </span><br><span class="line"></span><br><span class="line">大致就是把下载插件中的js代码修改一下，修改为：</span><br></pre></td></tr></table></figure>
‘use strict’;<br>var cheerio = require(‘cheerio’);</li>
</ul>
<p>// <a href="http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string" target="_blank" rel="noopener">http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</a><br>function getPosition(str, m, i) {<br>  return str.split(m, i).join(m).length;<br>}</p>
<p>var version = String(hexo.version).split(‘.’);<br>hexo.extend.filter.register(‘after_post_render’, function(data){<br>  var config = hexo.config;<br>  if(config.post_asset_folder){<br>        var link = data.permalink;<br>    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)<br>       var beginPos = getPosition(link, ‘/‘, 1) + 1;<br>    else<br>       var beginPos = getPosition(link, ‘/‘, 3) + 1;<br>    // In hexo 3.1.1, the permalink of “about” page is like “…/about/index.html”.<br>    var endPos = link.lastIndexOf(‘/‘) + 1;<br>    link = link.substring(beginPos, endPos);</p>
<pre><code>var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];
for(var i = 0; i &lt; toprocess.length; i++){
  var key = toprocess[i];

  var $ = cheerio.load(data[key], {
    ignoreWhitespace: false,
    xmlMode: false,
    lowerCaseTags: false,
    decodeEntities: false
  });

  $(&apos;img&apos;).each(function(){
    if ($(this).attr(&apos;src&apos;)){
        // For windows style path, we replace &apos;\&apos; to &apos;/&apos;.
        var src = $(this).attr(&apos;src&apos;).replace(&apos;\\&apos;, &apos;/&apos;);
        if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
           !/^\s*\//.test(src)) {
          // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.
          // In addition, to support multi-level local directory.
          var linkArray = link.split(&apos;/&apos;).filter(function(elem){
            return elem != &apos;&apos;;
          });
          var srcArray = src.split(&apos;/&apos;).filter(function(elem){
            return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;
          });
          if(srcArray.length &gt; 1)
            srcArray.shift();
          src = srcArray.join(&apos;/&apos;);
          $(this).attr(&apos;src&apos;, config.root + link + src);
          console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);
        }
    }else{
        console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);
        console.info&amp;&amp;console.info($(this));
    }
  });
  data[key] = $.html();
}</code></pre><p>  }<br>});<br>```</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
